AWSTemplateFormatVersion: '2010-09-09'

Description: An AWS CloudFormation template to create a brand new VPC and security groups.

Parameters:
  VpcCidr:
    Type: String
    Description: Optional - Specifies the CIDR Block of VPC
    Default: '10.0.0.0/16'
  SubnetCidr1:
    Type: String
    Description: Specifies the CIDR Block of Subnet 1
    Default: '10.0.0.0/24'
  SubnetCidr2:
    Type: String
    Description: Specifies the CIDR Block of Subnet 2
    Default: '10.0.1.0/24'
  SubnetCidr3:
    Type: String
    Description: Specifies the CIDR Block of Subnet 3
    Default: '10.0.2.0/24'
  VpcAvailabilityZones:
    Type: CommaDelimitedList
    Description: >
      Specifies a comma-separated list of 3 VPC Availability Zones for
      the creation of new subnets. These zones must have the available status.
    Default: 'ap-southeast-2c,ap-southeast-2b,ap-southeast-2a'

Conditions:
  CreateSubnet2: !Not [!Equals [!Ref SubnetCidr2, '']]
  CreateSubnet3: !And
    - !Not [!Equals [!Ref SubnetCidr3, '']]
    - !Condition CreateSubnet2

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  PubSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr1
      AvailabilityZone: !Select [ 0, !Ref VpcAvailabilityZones ]

  PubSubnetAz2:
    Condition: CreateSubnet2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr2
      AvailabilityZone: !Select [ 1, !Ref VpcAvailabilityZones ]

  PubSubnetAz3:
    Condition: CreateSubnet3
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr3
      AvailabilityZone: !Select [ 2, !Ref VpcAvailabilityZones ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteViaIgw:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicRouteViaIgw:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PubSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw

  PubSubnet2RouteTableAssociation:
    Condition: CreateSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw

  PubSubnet3RouteTableAssociation:
    Condition: CreateSubnet3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz3
      RouteTableId: !Ref RouteViaIgw

Outputs:
  VPCId:
    Description: The VPC Id created by this stack
    Value: !Ref Vpc
    Export:
      Name: !Sub '${AWS::StackName}-VPCId'

  VpcAvailabilityZones:
    Description: Comma-separated availability zones
    Value: !Join [',', !Ref VpcAvailabilityZones ]
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZones'

  Subnets:
    Description: Comma-separated subnet addresses
    Value: !If
      - CreateSubnet3
      - !Sub '${PubSubnetAz1},${PubSubnetAz2},${PubSubnetAz3}'
      - !If
        - CreateSubnet2
        - !Sub '${PubSubnetAz1}, ${PubSubnetAz2}'
        - !Sub '${PubSubnetAz1}'
    Export:
      Name: !Sub '${AWS::StackName}-Subnets'

  VpcCidr:
    Description: CIDR IP addresses inside the VPC
    Value: !Ref VpcCidr
    Export:
      Name: !Sub '${AWS::StackName}-VPCCidr'
